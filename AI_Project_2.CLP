; Coenraad Human 2841-1629

; ======================================================================================
;                                       N O T E S
; ======================================================================================

; The commutative laws: (P ∧ Q) ≡ (Q ∧ P) and (P ∨ Q) ≡ (Q ∨ P)  
; is rendered redundant and not implemented, due CLIPS automatically doing it.

; ======================================================================================
;                                   T E M P L A T E S
; ======================================================================================

(deftemplate sent 
    (slot name (default-dynamic (gensym*)))
    (multislot symb (default -1))
    (multislot con (default -1))
    (multislot isNeg (default -1))
    (slot brac (default -1))
)

; Example for the above deftemplate and what it means to the system.
; (sent (symb P)(isNeg -1))  ≡ P
; (sent (symb P Q)(con ^)(isNeg -1 -1)  ≡ (P^Q)
; (sent (symb P Q R)(con ^ ^)(isNeg -1 -1 1)(brac 1)  ≡ (P^Q)^~R

(deftemplate applyNeg 
    (slot name (default -1))
)

; ======================================================================================
;                                       F A C T S
; ======================================================================================

(deffacts identities
    (sent (symb P)(isNeg -1))
    (sent (symb Q)(isNeg -1))
    (sent (symb R)(isNeg -1))
    ; (sent (symb P Q)(con OR)(isNeg -1 1)(brac -1))
    ; (sent (symb R T)(con AND)(isNeg 1 -1)(brac -1))
)

; ======================================================================================
;                                    F U N C T I O N S
; ======================================================================================

(deffunction inverseNeg (?a)
    (if (= ?a 1) ; test if negative
        then
            (return -1) ; return positive
        else
            (return 1) ; return negative
    )
)

(deffunction inverseCon (?a)
    (if (= (str-compare ?a OR) 0) 
        then
            (return AND)
        else
            (return OR)
    )
)

(deffunction formatVar (?x ?n)
    (if (= ?n 1) ; test if negative
        then
            (bind ?x (format nil "~%s" ?x)) ; return negative
        else
            (bind ?X ?x) ; return positve
    )
    (return ?x)
)

; ======================================================================================
;                                     W E L C O M E
; ======================================================================================

; (defrule welcome
; =>
;     (format t "Coenraad Human (28410629) - AI Project for ITRW317, 2019 %n%n")
;     (format t "How to read facts: %n%n")
;     (format t "Deftemplate (sent (slot name) (multislot symb) (multislot con) (multislot isNeg) (slot brac))%n")
;     (format t "(slot name), autogenerated name for entry%n")
;     (format t "(multislot symb), is the symbols associated with the fact: P, Q, R%n")
;     (format t "(multislot con), is the connective between the facts: OR, AND, ->%n")
;     (format t "(multislot isNeg), states if a symbol is negative or not: -1 is false and 1 is true%n")
;     (format t "(slot brac), informs where the bracket is located when there are 3 symbols and more:%n")
;     (format t "-1 is no bracket, 1 for first pair, 2 is second pair and 4 for first and second pair%n")
;     (format t "(sent (name gen351) (symb P) (con -1) (isNeg -1) (brac -1)) is P%n")
;     (format t "Examples :%n")
;     (format t "(sent (name gen352) (symb P Q) (con OR) (isNeg -1 1) (brac -1)) is (P OR ~Q)%n")
;     (format t "(sent (name gen353) (symb P Q R) (con AND OR) (isNeg -1 -1 1) (brac 1)) is ((P AND Q) OR ~R)%n%n")
;     (format t "Testing de Morgan, negation and double negative:%n")
;     (format t "(assert (applyNeg (slot name))) , where name is the autogenerated name of the fact.")
; )

; ======================================================================================
;                                   I D E N T I T I E S
; ======================================================================================

; ¬ (¬ P) ≡ P
(defrule doubleNeg
    (sent (name ?fact)(symb ?x)(con -1)(isNeg ?n)(brac -1))
    ?out <- (applyNeg (name ?fact))
    (test (=  ?n 1))
    (not (sent (symb ?x)(con -1)(isNeg -1)(brac -1)))
=>
    (assert (sent (symb ?x)(con -1)(isNeg -1)(brac -1)))
    (bind ?x (formatVar ?x -1))
    (format t "Fact %s ==  %s... Double Negative %n" ?fact ?x)
    (retract ?out)
)

(defrule negation
    (sent (name ?fact)(symb ?x)(con -1)(isNeg ?n)(brac -1))
    ?out <- (applyNeg (name ?fact))
    (test (=  ?n -1))
    (not (sent (symb ?x)(con -1)(isNeg 1)(brac -1)))
=>
    (assert (sent (symb ?x)(con -1)(isNeg 1)(brac -1)))
    (bind ?x (formatVar ?x 1))
    (format t "Fact %S ==  %s... Negation %n" ?fact ?x)
    (retract ?out)
)

; implication rule (P ∨ Q) ≡ (¬ P → Q)
(defrule implication2
    (sent (symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1))
    (test (= (str-compare ?c OR) 0))
    (test (=  ?n1 -1))
    (test (=  ?n2 -1))
    (not (sent (symb ?x ?y)(con ->)(isNeg 1 -1)(brac -1)))
=>
    (bind ?c1 ->)
    (assert (sent (symb ?x ?y)(con ?c1)(isNeg 1 -1)(brac -1)))
    (format t "(~%s %s %s) ... Implication Rule %n" ?x ?c1 ?y)
)

(defrule implication31
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 OR) 0))
    (test (=  ?n1 -1))
    (test (=  ?n2 -1))
    (not (sent (symb ?x ?y ?z)(con -> ?c2)(isNeg 1 -1 ?n3)(brac 1)))
=>
    (bind ?c1 ->)
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg 1 -1 ?n3)(brac 1)))
    (bind ?x (formatVar ?x 1))
    (bind ?y (formatVar ?y -1))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s) ... Implication Rule %n" ?x ?c1 ?y ?c2 ?z)
)

(defrule implication32
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2))
    (test (= (str-compare ?c2 OR) 0))
    (test (=  ?n2 -1))
    (test (=  ?n3 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ->)(isNeg ?n1 1 -1 )(brac 2)))
=>
    (bind ?c2 ->)
    (assert (sent (symb ?x ?y ?z)(con ?c1 ->)(isNeg ?n1 1 -1 )(brac 2)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y 1))
    (bind ?z (formatVar ?z -1))
    (format t "(%s %s (%s %s %s)) ... Implication Rule %n" ?x ?c1 ?y ?c2 ?z)
)

(defrule implication41
    (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ?c3)(isNeg ?n1 ?n2 ?n3 ?n4)(brac 4))
    (test (= (str-compare ?c1 OR) 0))
    (test (= ?n1 -1))
    (test (= ?n2 -1))
    (not (sent (symb ?x ?y ?z ?q)(con -> ?c2 ?c3)(isNeg 1 -1 ?n3 ?n4)(brac 4)))
=>
    (bind ?c1 ->)
    (assert (symb ?x ?y ?z ?q)(con -> ?c2 ?c3)(isNeg 1 -1 ?n3 ?n4)(brac 4))
    (bind ?x (formatVar ?x 1))
    (bind ?y (formatVar ?y -1))
    (bind ?z (formatVar ?z ?n3))
    (bind ?q (formatVar ?q ?n4))
    (format t "((%s %s %s) %s (%s %s %s)) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z ?c3 ?q)
)

(defrule implication42
    (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ?c3)(isNeg ?n1 ?n2 ?n3 ?n4)(brac 4))
    (test (= (str-compare ?c3 OR) 0))
    (test (= ?n3 -1))
    (test (= ?n4 -1))
    (not (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ->)(isNeg ?n1 ?n2 1 -1)(brac 4)))
=>
    (bind ?c1 ->)
    (assert (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ->)(isNeg ?n1 ?n2 1 -1)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z 1))
    (bind ?q (formatVar ?q -1))
    (format t "((%s %s %s) %s (%s %s %s)) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z ?c3 ?q)
)

; the contrapositive law: (P → Q) ≡ (¬ Q → ¬ P)
(defrule contrapositive2
    (sent (name ?fact)(symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1))
    (test (= (str-compare ?c ->) 0))
    (test (=  ?n1 -1))
    (test (=  ?n2 -1))
    (not (sent (symb ?x ?y)(con ->)(isNeg 1 1)(brac -1)))
=>
    (assert (sent (symb ?x ?y)(con ->)(isNeg 1 1)(brac -1)))
    (format t "Fact %s == (~%s %s ~%s) ... Contrapositive Law %n" ?fact ?y ?c ?x)
)

(defrule contrapositive31
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 ->) 0))
    (test (=  ?n1 -1))
    (test (=  ?n2 -1))
    (not (sent (symb ?x ?y ?z)(con -> ?c2)(isNeg 1 1 ?n3)(brac 1)))
=>
    (bind ?c1 ->)
    (assert (sent (symb ?x ?y ?z)(con -> ?c2)(isNeg 1 1 ?n3)(brac 1)))
    (bind ?x (formatVar ?x 1))
    (bind ?y (formatVar ?y 1))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z)
)

(defrule contrapositive32
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2))
    (test (= (str-compare ?c2 ->) 0))
    (test (=  ?n2 -1))
    (test (=  ?n3 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ->)(isNeg ?n1 1 1 )(brac 2)))
=>
    (bind ?c2 ->)
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 1 1 )(brac 2)))
    (bind ?x (formatVar ?x ?n3))
    (bind ?y (formatVar ?y 1))
    (bind ?z (formatVar ?z 1))
    (format t "((%s %s %s) %s %s) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z)
)

(defrule contrapositive41
    (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ?c3)(isNeg ?n1 ?n2 ?n3 ?n4)(brac 4))
    (test (= (str-compare ?c1 ->) 0))
    (test (=  ?n1 -1))
    (test (=  ?n2 -1))
    (not (sent (symb ?x ?y ?z ?q)(con -> ?c2 ?c3)(isNeg 1 1 ?n3 ?n4)(brac 4)))
=>
    (bind ?c1 ->)
    (assert (symb ?x ?y ?z ?q)(con -> ?c2 ?c3)(isNeg 1 1 ?n3 ?n4)(brac 4))
    (bind ?x (formatVar ?x 1))
    (bind ?y (formatVar ?y 1))
    (bind ?z (formatVar ?z ?n3))
    (bind ?q (formatVar ?q ?n4))
    (format t "((%s %s %s) %s (%s %s %s)) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z ?c3 ?q)
)

(defrule contrapositive42
    (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ?c3)(isNeg ?n1 ?n2 ?n3 ?n4)(brac 4))
    (test (= (str-compare ?c3 ->) 0))
    (test (=  ?n3 -1))
    (test (=  ?n4 -1))
    (not (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ->)(isNeg ?n1 ?n2 1 1)(brac 4)))
=>
    (bind ?c3 ->)
    (assert (sent (symb ?x ?y ?z ?q)(con ?c1 ?c2 ->)(isNeg ?n1 ?n2 1 1)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z 1))
    (bind ?q (formatVar ?q 1))
    (format t "((%s %s %s) %s (%s %s %s)) ... Contrapositive Law %n" ?x ?c1 ?y ?c2 ?z ?c3 ?q)
)

; de Morgan’s law: ¬ (P ∨ Q) ≡ (¬ P ∧ ¬ Q) and ¬ (P ∧ Q) ≡ (¬ P ∨¬ Q)
(defrule deMorganOr
    (sent (name ?fact)(symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1))
    ?out <- (applyNeg (name ?fact))
    (test (= (str-compare ?c OR) 0))
    (not (sent (symb ?x ?y)(con AND)(isNeg ?N1&:(= ?N1 (* ?n1 -1)) ?N2&:(= ?N2 (* ?n2 -1)))(brac -1)))
=>
    (retract ?out)
    (bind ?n1 (inverseNeg ?n1))
    (bind ?n2 (inverseNeg ?n2))
    (bind ?c (inverseCon ?c))
    (assert (sent (symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1)))
)

(defrule deMorganAnd
    (sent (name ?fact)(symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1))
    ?out <- (applyNeg (name ?fact))
    (test (= (str-compare ?c AND) 0))
    (not (sent (symb ?x ?y)(con OR)(isNeg ?N1&:(= ?N1 (* ?n1 -1)) ?N2&:(= ?N2 (* ?n2 -1)))(brac -1)))
=>
    (retract ?out)
    (bind ?n1 (inverseNeg ?n1))
    (bind ?n2 (inverseNeg ?n2))
    (bind ?c (inverseCon ?c))
    (assert (sent (symb ?x ?y)(con ?c)(isNeg ?n1 ?n2)(brac -1)))
)

; the associative law: ((P ∧ Q) ∧ R) ≡ (P ∧ (Q ∧ R))
(defrule associativeAnd
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 AND) 0))
    (test (= (str-compare ?c2 AND) 0))
    (test (= ?n1 -1)) 
    (test (= ?n2 -1))
    (test (= ?n3 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s (%s %s %s)) ... Associative Law %n" ?x ?c1 ?y ?c2 ?z)
)

; the associative law: ((P ∨ Q) ∨ R) ≡ (P ∨ (Q ∨ R))
 (defrule associativeOr
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 OR) 0))
    (test (= (str-compare ?c2 OR) 0))
    (test (= ?n1 -1)) 
    (or (test (= ?n2 -1))
        (test (= ?n3 -1)))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s (%s %s %s)) ... Associative Law %n" ?x ?c1 ?y ?c2 ?z)
)

; the distributive law: P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R)
 (defrule distributiveOr2
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2))
    (test (= (str-compare ?c1 OR) 0))
    (test (= (str-compare ?c2 AND) 0))
    (test (= ?n2 -1))
    (test (= ?n3 -1))
    (not (sent (symb ?x ?y ?x ?z)(con ?c1 ?c2 ?c1)(isNeg ?n1 ?n2 ?n1 ?n3)(brac 4)))
=>
    (assert (sent (symb ?x ?y ?x ?z)(con ?c1 ?c2 ?c1)(isNeg ?n1 ?n2 ?n1 ?n3)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s %s) %s (%s %s %s) ... Distributive Law %n" ?x ?c1 ?y ?c2 ?x ?c1 ?z)
)

 (defrule distributiveOr1
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 AND) 0))
    (test (= (str-compare ?c2 OR) 0))
    (test (= ?n1 -1))
    (test (= ?n2 -1))
    (not (sent (symb ?x ?z ?y ?z)(con ?c2 ?c1 ?c2)(isNeg ?n1 ?n3 ?n2 ?n3)(brac 4)))
=>
    (assert (sent (symb ?x ?z ?y ?z)(con ?c2 ?c1 ?c2)(isNeg ?n1 ?n3 ?n2 ?n3)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s %s) %s (%s %s %s) ... Distributive Law %n" ?x ?c2 ?z ?c1 ?y ?c2 ?z)
)

; the distributive law: P ∧ (Q ∨ R) ≡ (P ∧ Q) ∨ (P ∧ R)
(defrule distributiveAnd
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 2))
    (test (= (str-compare ?c1 AND) 0))
    (test (= (str-compare ?c2 OR) 0))
    (test (= ?n1 -1))
    (or (test (= ?n2 -1))
        (test (= ?n3 -1)))
    (not (sent (symb ?x ?y ?x ?z)(con ?c1 ?c2 ?c1)(isNeg ?n1 ?n2 ?n1 ?n3)(brac 4)))
=>
    (assert (sent (symb ?x ?y ?x ?z)(con ?c1 ?c2 ?c1)(isNeg ?n1 ?n2 ?n1 ?n3)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s %s) %s (%s %s %s) ... Distributive Law %n" ?x ?c1 ?y ?c2 ?x ?c1 ?z)
)

 (defrule distributiveAnd1
    (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1))
    (test (= (str-compare ?c1 OR) 0))
    (test (= (str-compare ?c2 AND) 0))
    (test (= ?n3 -1))
    (or (test (= ?n1 -1))
        (test (= ?n2 -1)))
    (not (sent (symb ?x ?z ?y ?z)(con ?c2 ?c1 ?c2)(isNeg ?n1 ?n3 ?n2 ?n3)(brac 4)))
=>
    (assert (sent (symb ?x ?z ?y ?z)(con ?c2 ?c1 ?c2)(isNeg ?n1 ?n3 ?n2 ?n3)(brac 4)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s %s %s) %s (%s %s %s) ... Distributive Law %n" ?x ?c2 ?z ?c1 ?y ?c2 ?z)
)

; ======================================================================================
;                                    T R I G G E R S
; ======================================================================================

(defrule _triggerAnd
    (sent (symb ?x)(con -1)(isNeg -1)(brac -1))
    (sent (symb ?y)(con -1)(isNeg -1)(brac -1))
    (not (test (= (str-compare ?x ?y) 0)))
    (not (sent (symb ?x ?y)(con AND)(isNeg -1 -1)(brac -1)))
=>
    (assert (sent(symb ?x ?y)(con AND)(isNeg -1 -1)(brac -1)))
    (bind ?x (formatVar ?x -1))
    (bind ?y (formatVar ?y -1))
    (format t "(%s AND %s)%n" ?x ?y)
) 

(defrule _triggerAnd2
    (sent (symb ?x)(con -1)(isNeg -1)(brac -1))
    (sent (symb ?y)(con -1)(isNeg -1)(brac -1))
    (sent (symb ?z)(con -1)(isNeg -1)(brac -1))
    (not (test (= (str-compare ?x ?y) 0)))
    (not (test (= (str-compare ?x ?z) 0)))
    (not (test (= (str-compare ?y ?z) 0)))
    (not (sent (symb ?x ?y ?z)(con AND AND)(isNeg -1 -1 -1)(brac -1)))
=>
    (assert (sent(symb ?x ?y ?z)(con AND AND)(isNeg -1 -1 -1)(brac -1)))
    (bind ?x (formatVar ?x -1))
    (bind ?y (formatVar ?y -1))
    (bind ?z (formatVar ?z -1))
    (format t "(%s AND %s AND %s)%n" ?x ?y ?z)
) 

(defrule _triggerOr
    (sent (symb ?x)(con -1)(isNeg ?n1)(brac -1))
    (sent (symb ?y)(con -1)(isNeg ?n2)(brac -1))
    (not (test (= (str-compare ?x ?y) 0)))
    (or (test (= ?n1 -1)) 
        (test (= ?n2 -1)))
    (not (sent (symb ?x ?y)(con OR)(isNeg ?n1 ?n2)(brac -1)))
=>
    (assert (sent(symb ?x ?y)(con OR)(isNeg ?n1 ?n2)(brac -1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (format t "(%s OR %s)%n" ?x ?y)
) 

(defrule _triggerOr2
    (sent (symb ?x)(con -1)(isNeg ?n1)(brac -1))
    (sent (symb ?y)(con -1)(isNeg ?n2)(brac -1))
    (sent (symb ?z)(con -1)(isNeg ?n3)(brac -1))
    (not (test (= (str-compare ?x ?y) 0)))
    (not (test (= (str-compare ?x ?z) 0)))
    (not (test (= (str-compare ?y ?z) 0)))
     (or (test (= ?n1 -1)) 
         (test (= ?n2 -1))
         (test (= ?n3 -1)))
    (not (sent (symb ?x ?y ?z)(con OR OR)(isNeg ?n1 ?n2 ?n3)(brac -1)))
=>
    (assert (sent (symb ?x ?y ?z)(con OR OR)(isNeg ?n1 ?n2 ?n3)(brac -1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "(%s OR %s OR %s)%n" ?x ?y ?z)
) 

(defrule _triggerBracketOr1
    (sent (symb ?x ?y ?z)(con ?c1&OR ?c2&OR)(isNeg ?n1 ?n2 ?n3)(brac -1))
    (or (test (= ?n1 -1)) 
        (test (= ?n2 -1)))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s)%n" ?x ?c1 ?y ?c2 ?z)
) 

(defrule _triggerBracketOr2
    (sent (symb ?x ?y ?z)(con ?c1&OR ?c2&AND)(isNeg ?n1 ?n2 ?n3)(brac -1))
    (or (test (= ?n1 -1)) 
        (test (= ?n2 -1)))
    (test (= ?n3 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s)%n" ?x ?c1 ?y ?c2 ?z)
) 

(defrule _triggerBracketAnd1
    (sent (symb ?x ?y ?z)(con ?c1&AND ?c2&OR)(isNeg ?n1 ?n2 ?n3)(brac -1))
    (test (= ?n1 -1)) 
    (test (= ?n2 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s)%n" ?x ?c1 ?y ?c2 ?z)
) 

(defrule _triggerBracketAnd2
    (sent (symb ?x ?y ?z)(con ?c1&AND ?c2&AND)(isNeg ?n1 ?n2 ?n3)(brac -1))
    (test (= ?n1 -1)) 
    (test (= ?n2 -1))
    (test (= ?n3 -1))
    (not (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
=>
    (assert (sent (symb ?x ?y ?z)(con ?c1 ?c2)(isNeg ?n1 ?n2 ?n3)(brac 1)))
    (bind ?x (formatVar ?x ?n1))
    (bind ?y (formatVar ?y ?n2))
    (bind ?z (formatVar ?z ?n3))
    (format t "((%s %s %s) %s %s)%n" ?x ?c1 ?y ?c2 ?z)
) 
